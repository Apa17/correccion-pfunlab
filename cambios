--------------------------------------------------------------------------------
-- AUXILIARES
--------------------------------------------------------------------------------

-- Computa la lista de variables libres de una expresión
freeVariables :: Expr -> [Name]
freeVariables (Var name) = [name]
freeVariables (Lit _) = []
freeVariables (Infix _ e1 e2) = freeVariables e1 ++ freeVariables e2
freeVariables (App e1 e2) = freeVariables e1 ++ freeVariables e2
freeVariables (Lam name expr) = filter (/= name) (freeVariables expr)
freeVariables (Case e1 e2 (name1, name2, expr)) =
  freeVariables e1 ++ freeVariables e2 ++ filter (/= name2) (filter (/= name1) (freeVariables expr))
freeVariables (If cond e1 e2) = freeVariables cond ++ freeVariables e1 ++ freeVariables e2

lintEtaAux :: [Name] -> Linting Expr
lintEtaAux array (Lam x (App e1 (Var y))) =
  let (e1', l) = lintEtaAux array e1
   in if x == y && notElem x (freeVariables e1)
        then
          (e1', l ++ [LintEta (Lam x (App e1' (Var y))) e1'])
        else (Lam x (App e1' (Var y)), l)
lintEtaAux array (Lam x e) =
  let (e', l) = lintEtaAux array e
   in (Lam x e', l)
lintEtaAux array (App e1 e2) =
  let (e1', l1) = lintEtaAux array e1
      (e2', l2) = lintEtaAux array e2
   in (App e1' e2', l1 ++ l2)
lintEtaAux array (Infix op e1 e2) =
  let (e1', l1) = lintEtaAux array e1
      (e2', l2) = lintEtaAux array e2
   in (Infix op e1' e2', l1 ++ l2)
lintEtaAux array (Case e1 e2 (x, y, e3)) =
  let (e1', l1) = lintEtaAux array e1
      (e2', l2) = lintEtaAux array e2
      (e3', l3) = lintEtaAux array e3
   in (Case e1' e2' (x, y, e3'), l1 ++ l2 ++ l3)
lintEtaAux array (If cond e1 e2) =
  let (cond', l1) = lintEtaAux array cond
      (e1', l2) = lintEtaAux array e1
      (e2', l3) = lintEtaAux array e2
   in (If cond' e1' e2', l1 ++ l2 ++ l3)
lintEtaAux _ e = (e, [])

genericLintComp :: Linting Expr
genericLintComp (App v1 (App v2 x)) =
 let (v1', l1) = lintComp v1
       in let (v2', l2) = lintComp v2
           in let res = App (Infix Comp v1' v2') x
               in (res, l1 ++ l2 ++ [LintComp (App v1' (App v2' x)) res])

genericLintLamda :: Linting Expr -> Linting Expr
genericLintLamda f (Lam name e) =
  let (e', l) = f e
     in (Lam name e', l)


--------------------------------------------------------------------------------
-- Composición
--------------------------------------------------------------------------------
-- se aplica en casos de la forma (f (g t)), reemplazando por (f . g) t
-- Construye sugerencias de la forma (LintComp e r)

lintComp :: Linting Expr
lintComp (App v1 (App v2 (Lit x))) =
   genericLintComp (App v1 (App v2 (Lit x)))
lintComp (App v1 (App v2 (Var x))) =
   genericLintComp (App v1 (App v2 (Var x)))
lintComp (App (Var x) (App (Var y) (Infix o (Var z) e2))) =
   let (e2', l2) = lintComp e2
       in let res = App (Infix Comp (Var x) (Var y)) (Infix o (Var z) e2)
            in (res, [LintComp (App (Var x) (App (Var y) (Infix o (Var z) e2))) res])
lintComp (App (Var x) (App (Var y) (Infix o (Lit z) e2))) =
   let (e2', l2) = lintComp e2
       in let res = App (Infix Comp (Var x) (Var y)) (Infix o (Lit z) e2)
            in (res, [LintComp (App (Var x) (App (Var y) (Infix o (Lit z) e2))) res])
lintComp (App x (App (Infix Comp e1 e2) v2)) =
   let (e1', le1) = lintComp e1
       in let (e2', le2) = lintComp e2
           in let (v2', l2) = lintComp v2
           in let (x', l) = lintComp x
            in let res = App (Infix Comp x' (Infix Comp e1 e2)) v2'
                       in (res, le1 ++ le2 ++ l2 ++ [LintComp (App x' (App (Infix Comp e1' e2') v2'))  res])
lintComp (Lam name e) =
   let (e', l) = lintComp e
       in (Lam name e', l)
lintComp (If e1 e2 e3) =
    let (e1', l1) = lintComp e1
       in let (e2', l2) = lintComp e2
           in let (e3', l3) = lintComp e3
               in (If e1' e2' e3', l1 ++ l2 ++ l3)
lintComp (Case e1 e2 (n1, n2, e3)) =
 let (e1', l1) = lintComp e1
       in let (e2', l2) = lintComp e2
           in let (e3', l3) = lintComp e3
               in (Case e1' e2' (n1, n2, e3'), l1 ++ l2 ++ l3)
lintComp (Infix o e1 e2) =
  let (e1', l1) = lintComp e1
       in let (e2', l2) = lintComp e2
           in (Infix o e1' e2', l1 ++ l2)
lintComp (App e1 e2) =
  let (e1', l1) = lintComp e1 
   in let (e2', l2) = lintComp e2
    in if not (null l2)
      then let (r1', lr1') = lintComp (App e1' e2')
           in (r1', l1 ++ l2 ++ lr1')
      else (App e1' e2', l1 ++ l2)
lintComp e = (e, [])
